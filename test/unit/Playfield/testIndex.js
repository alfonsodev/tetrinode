var assert = require('assert');
var Playfield = require('../../../index').Playfield;

var printM = function(matrix) {
  var buff;
  for (var i = 0; i < matrix.length; i++) {
    buff = '';
    for (var j = 0; j < matrix[0].length; j++) {
      buff = buff + matrix[i][j];
    }
    console.log(buff);
  }
};

describe('Playfield constructor', function() {
  it('can be instaciated', function() {
    var playfield1 = new Playfield();
    assert.strictEqual('object', typeof playfield1);
  });

  it('has the correct dimensions', function() {
    var playfield1 = new Playfield();
    assert.equal(playfield1.matrix.length, playfield1.height);
    assert.equal(playfield1.matrix[0].length, playfield1.width);
  });
});


describe('Playfield collisions', function() {
  it.skip('update matrix', function() {
    var matrixR = [
      //  1  2  3  4  5  6  7  8  9 10  11
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 0
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 1
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 2
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 3
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 4
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 5
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 6
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 7
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 8
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 9
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 10
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 11
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 12
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 13
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 14
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 15
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 16
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 17
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 18
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 19
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 20
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 21
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] // 22
    ];

    var playfield1 = new Playfield();
    var tetro = {
      posX: 1,
      posY: 18,
      color: 3,
      getMatrix: function() { return [[0,1,0,0],[0,1,0,0],[0,1,0,0],[0,1,0,0]]; }
    };

    playfield1.update(tetro);
    assert.deepEqual(matrixR, playfield1.matrix, 'doen\'t print ok' );
  });


  it.only('collideLeft with wall', function() {
    var ref = [
      //  1  2  3  4  5  6  7  8  9 10  11
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 0
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 1
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 2
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 3
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 4
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 5
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 6
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 7
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 8
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 9
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 10
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 11
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 12
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 13
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 14
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 15
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 16
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 17
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 18
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 19
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 20
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 21
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] // 22
    ];

    var playfield1 = new Playfield();
    var tetro = {
      posX: 0,
      posY: 18,
      getMatrix: function(){ return [[0,1,1,0],[0,1,0,0],[0,1,0,0],[0,0,0,0]]; }
    };

    assert.equal(playfield1.collideLeft(tetro), true);

    tetro.posX = 1;

    assert.equal(playfield1.collideLeft(tetro), false);

    tetro.getMatrix = function() { return [[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]]; };

   tetro.posX = 0;
    
    assert.equal(playfield1.collideLeft(tetro), true);
  });

  it('collideRight with wall', function() {
    var ref = [
      //  1  2  3  4  5  6  7  8  9 10  11
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 0
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 1
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 2
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 3
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 4
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 5
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 6
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 7
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 8
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 9
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 10
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 11
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 12
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 13
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 14
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 15
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 16
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 17
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 18
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 19
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 20
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 21
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] // 22
    ];

    var playfield1 = new Playfield();
    var tetro = {
      posX: 8,
      posY: 13,
      getMatrix: function(){ return [[0,1,1,0],[0,1,0,0],[0,1,0,0],[0,0,0,0]]; }
    };

    assert.equal(playfield1.collideRight(tetro), true);

    tetro.posX = 7;

    assert.equal(playfield1.collideRight(tetro), false);

  });


});
